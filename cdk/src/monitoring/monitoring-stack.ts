import { Environment, Stack } from 'aws-cdk-lib';
import * as chatbot from 'aws-cdk-lib/aws-chatbot';
import * as sns from 'aws-cdk-lib/aws-sns';
import { Construct } from 'constructs';
import { CommonProps, EnvType } from '../util';
import { SyntheticsStack } from './synthetics';

export interface MonitoringProps extends CommonProps {
  slackConfig: chatbot.SlackChannelConfigurationProps;
}

const ticketTopicName = (envType: EnvType) => `${envType}-ticketSNSTopic`;

/**
 * Builds an ARN that points to an SNS topic that the Slack chatbot subscribes to.
 * This doesn't guarantee that the topic at the ARN exists, since it is generated by a different
 * CDK app.
 * @param envType
 * @param env
 * @returns ARN to the topic.
 */
export const topicArn = (envType: EnvType, env: Environment): string =>
  `arn:aws:sns:${env.region}:${env.account}:${ticketTopicName(envType)}`;

export class MonitoringStack extends Stack {
  readonly ticketSNSTopic: sns.Topic;

  constructor(scope: Construct, id: string, props: MonitoringProps) {
    super(scope, id, props);

    const { envType } = props;

    // The chatbot must be manually connected to Slack per AWS account. This can't be done in CDK.
    const slackbot = new chatbot.SlackChannelConfiguration(this, 'SlackChannel', {
      ...props.slackConfig,
      loggingLevel: chatbot.LoggingLevel.INFO,
    });

    this.ticketSNSTopic = new sns.Topic(this, 'ticketSNSTopic', {
      displayName: 'Ticket-level alarms',
      topicName: ticketTopicName(envType),
    });
    slackbot.addNotificationTopic(this.ticketSNSTopic);

    // LeadOut doesn't exist in the Deployments environment, so there's nothing to test.
    if (envType !== EnvType.Deployments)
      new SyntheticsStack(this, 'synthetics', { ...props, ticketSNSTopic: this.ticketSNSTopic });
  }
}
